import { SvelteComponent, init, safe_not_equal, append_styles, create_slot, assign, element, set_attributes, toggle_class, insert, update_slot_base, get_all_dirty_from_scope, get_slot_changes, get_spread_update, transition_in, transition_out, detach, compute_rest_props, exclude_internal_props } from 'svelte/internal';
import { onDestroy } from 'svelte';
import { writable } from 'svelte/store';

const columnsStore = writable(12);

/* src/lib/Grid.svelte generated by Svelte v3.42.1 */

function add_css(target) {
	append_styles(target, "svelte-zbu7j0", ".containerSGR.svelte-zbu7j0{box-sizing:border-box;display:flex;flex-wrap:wrap;width:calc(100% + (var(--paddingSGR) * 2));margin:var(--marginSGR)}.colSGR.svelte-zbu7j0{position:relative;box-sizing:border-box;flex-grow:var(--colFlexSGR);padding:var(--paddingSGR);order:var(--orderSGR)}.colSGR-offset-xs.svelte-zbu7j0{margin-left:var(--xsOffset)}.col-xs.svelte-zbu7j0{flex-basis:var(--xsWidthSGR);max-width:var(--xsWidthSGR)}@media(min-width: 576px){.col-sm.svelte-zbu7j0{flex-basis:var(--smWidthSGR);max-width:var(--smWidthSGR)}.colSGR-offset-sm.svelte-zbu7j0{margin-left:var(--smOffset)}}@media(min-width: 768px){.col-md.svelte-zbu7j0{flex-basis:var(--mdWidthSGR);max-width:var(--mdWidthSGR)}.colSGR-offset-md.svelte-zbu7j0{margin-left:var(--mdOffset)}}@media(min-width: 992px){.col-lg.svelte-zbu7j0{flex-basis:var(--lgWidthSGR);max-width:var(--lgWidthSGR)}.colSGR-offset-lg.svelte-zbu7j0{margin-left:var(--lgOffset)}}@media(min-width: 1200px){.col-xl.svelte-zbu7j0{max-width:var(--xlWidthSGR)}.colSGR-offset-xl.svelte-zbu7j0{margin-left:var(--xlOffset)}}");
}

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);

	let div_levels = [
		/*$$restProps*/ ctx[2],
		{ style: /*styleGeneral*/ ctx[1] },
		{ class: /*classGeneral*/ ctx[0] }
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "svelte-zbu7j0", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[17],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[17])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[17], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
				(!current || dirty & /*styleGeneral*/ 2) && { style: /*styleGeneral*/ ctx[1] },
				(!current || dirty & /*classGeneral*/ 1) && { class: /*classGeneral*/ ctx[0] }
			]));

			toggle_class(div, "svelte-zbu7j0", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"container","columns","gutter","order","xs","sm","md","lg","xl","xsOffset","smOffset","mdOffset","lgOffset","xlOffset"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { container = false } = $$props;
	let { columns = 12 } = $$props;
	let { gutter = null } = $$props;
	let { order = null } = $$props;
	let { xs = null } = $$props;
	let { sm = null } = $$props;
	let { md = null } = $$props;
	let { lg = null } = $$props;
	let { xl = null } = $$props;
	let { xsOffset = null } = $$props;
	let { smOffset = null } = $$props;
	let { mdOffset = null } = $$props;
	let { lgOffset = null } = $$props;
	let { xlOffset = null } = $$props;
	let classGeneral = '';
	let styleGeneral = '';
	let localColumns;
	const unsubscribe = columnsStore.subscribe(value => localColumns = value);

	const getValue = breakpoint => {
		if (breakpoint > localColumns) {
			breakpoint = localColumns;
		}

		return breakpoint
		? `${breakpoint / localColumns * 100}%`
		: false;
	};

	const createClassSize = () => {
		let newClass = 'col-xs ';
		newClass += sm ? 'col-sm ' : '';
		newClass += md ? 'col-md ' : '';
		newClass += lg ? 'col-lg ' : '';
		newClass += xl ? 'col-xl ' : '';
		newClass += xsOffset ? 'colSGR-offset-xs ' : '';
		newClass += smOffset ? 'colSGR-offset-sm ' : '';
		newClass += mdOffset ? 'colSGR-offset-md ' : '';
		newClass += lgOffset ? 'colSGR-offset-lg ' : '';
		newClass += xlOffset ? 'colSGR-offset-xl ' : '';
		return newClass;
	};

	const createStyleSize = () => {
		let newStyle = '';

		newStyle += xs
		? `--xsWidthSGR:${getValue(xs)}; `
		: `--xsWidthSGR:100%; `;

		newStyle += sm ? `--smWidthSGR:${getValue(sm)}; ` : '';
		newStyle += md ? `--mdWidthSGR:${getValue(md)}; ` : '';
		newStyle += lg ? `--lgWidthSGR:${getValue(lg)}; ` : '';
		newStyle += xl ? `--xlWidthSGR:${getValue(xl)}; ` : '';
		newStyle += xsOffset ? `--xsOffset:${getValue(xsOffset)}; ` : '';
		newStyle += smOffset ? `--smOffset:${getValue(smOffset)}; ` : '';
		newStyle += mdOffset ? `--mdOffset:${getValue(mdOffset)}; ` : '';
		newStyle += lgOffset ? `--lgOffset:${getValue(lgOffset)}; ` : '';
		newStyle += xlOffset ? `--xlOffset:${getValue(xlOffset)}; ` : '';
		return newStyle;
	};

	const createGutter = () => {
		return gutter
		? `--paddingSGR:${gutter / 2}px;--marginSGR:-${gutter / 2}px;`
		: '--paddingSGR:0px;--marginSGR:0px;';
	};

	onDestroy(() => unsubscribe());

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('container' in $$new_props) $$invalidate(3, container = $$new_props.container);
		if ('columns' in $$new_props) $$invalidate(4, columns = $$new_props.columns);
		if ('gutter' in $$new_props) $$invalidate(5, gutter = $$new_props.gutter);
		if ('order' in $$new_props) $$invalidate(6, order = $$new_props.order);
		if ('xs' in $$new_props) $$invalidate(7, xs = $$new_props.xs);
		if ('sm' in $$new_props) $$invalidate(8, sm = $$new_props.sm);
		if ('md' in $$new_props) $$invalidate(9, md = $$new_props.md);
		if ('lg' in $$new_props) $$invalidate(10, lg = $$new_props.lg);
		if ('xl' in $$new_props) $$invalidate(11, xl = $$new_props.xl);
		if ('xsOffset' in $$new_props) $$invalidate(12, xsOffset = $$new_props.xsOffset);
		if ('smOffset' in $$new_props) $$invalidate(13, smOffset = $$new_props.smOffset);
		if ('mdOffset' in $$new_props) $$invalidate(14, mdOffset = $$new_props.mdOffset);
		if ('lgOffset' in $$new_props) $$invalidate(15, lgOffset = $$new_props.lgOffset);
		if ('xlOffset' in $$new_props) $$invalidate(16, xlOffset = $$new_props.xlOffset);
		if ('$$scope' in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		{
			$$invalidate(0, classGeneral = container
			? 'containerSGR'
			: `colSGR ${createClassSize()}`);

			if (container) {
				$$invalidate(1, styleGeneral = createGutter());
				columnsStore.update(() => columns || 12);
			} else {
				$$invalidate(1, styleGeneral = createStyleSize());

				if (xs || sm || md || lg || xl) {
					$$invalidate(1, styleGeneral += `--colFlexSGR:0;`);
				} else {
					$$invalidate(1, styleGeneral = `--colFlexSGR:1;`);
				}

				if (order || order === 0) {
					$$invalidate(1, styleGeneral += `--orderSGR:${order};`);
				}
			}

			if ($$restProps.style) {
				$$invalidate(1, styleGeneral += $$restProps.style);
			}

			if ($$restProps.class) {
				$$invalidate(0, classGeneral += ` ${$$restProps.class}`);
			}
		}
	};

	return [
		classGeneral,
		styleGeneral,
		$$restProps,
		container,
		columns,
		gutter,
		order,
		xs,
		sm,
		md,
		lg,
		xl,
		xsOffset,
		smOffset,
		mdOffset,
		lgOffset,
		xlOffset,
		$$scope,
		slots
	];
}

class Grid extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				container: 3,
				columns: 4,
				gutter: 5,
				order: 6,
				xs: 7,
				sm: 8,
				md: 9,
				lg: 10,
				xl: 11,
				xsOffset: 12,
				smOffset: 13,
				mdOffset: 14,
				lgOffset: 15,
				xlOffset: 16
			},
			add_css
		);
	}
}

export { Grid as default };
