(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.GridResponsive = factory());
}(this, (function () { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function append_styles(target, style_sheet_id, styles) {
        const append_styles_to = get_root_for_style(target);
        if (!append_styles_to.getElementById(style_sheet_id)) {
            const style = element('style');
            style.id = style_sheet_id;
            style.textContent = styles;
            append_stylesheet(append_styles_to, style);
        }
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root.host) {
            return root;
        }
        return document;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const columnsStore = writable(12);

    /* src/lib/Grid.svelte generated by Svelte v3.42.1 */

    function add_css(target) {
    	append_styles(target, "svelte-zbu7j0", ".containerSGR.svelte-zbu7j0{box-sizing:border-box;display:flex;flex-wrap:wrap;width:calc(100% + (var(--paddingSGR) * 2));margin:var(--marginSGR)}.colSGR.svelte-zbu7j0{position:relative;box-sizing:border-box;flex-grow:var(--colFlexSGR);padding:var(--paddingSGR);order:var(--orderSGR)}.colSGR-offset-xs.svelte-zbu7j0{margin-left:var(--xsOffset)}.col-xs.svelte-zbu7j0{flex-basis:var(--xsWidthSGR);max-width:var(--xsWidthSGR)}@media(min-width: 576px){.col-sm.svelte-zbu7j0{flex-basis:var(--smWidthSGR);max-width:var(--smWidthSGR)}.colSGR-offset-sm.svelte-zbu7j0{margin-left:var(--smOffset)}}@media(min-width: 768px){.col-md.svelte-zbu7j0{flex-basis:var(--mdWidthSGR);max-width:var(--mdWidthSGR)}.colSGR-offset-md.svelte-zbu7j0{margin-left:var(--mdOffset)}}@media(min-width: 992px){.col-lg.svelte-zbu7j0{flex-basis:var(--lgWidthSGR);max-width:var(--lgWidthSGR)}.colSGR-offset-lg.svelte-zbu7j0{margin-left:var(--lgOffset)}}@media(min-width: 1200px){.col-xl.svelte-zbu7j0{max-width:var(--xlWidthSGR)}.colSGR-offset-xl.svelte-zbu7j0{margin-left:var(--xlOffset)}}");
    }

    function create_fragment(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[18].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);

    	let div_levels = [
    		/*$$restProps*/ ctx[2],
    		{ style: /*styleGeneral*/ ctx[1] },
    		{ class: /*classGeneral*/ ctx[0] }
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			toggle_class(div, "svelte-zbu7j0", true);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[17],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[17])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[17], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
    				(!current || dirty & /*styleGeneral*/ 2) && { style: /*styleGeneral*/ ctx[1] },
    				(!current || dirty & /*classGeneral*/ 1) && { class: /*classGeneral*/ ctx[0] }
    			]));

    			toggle_class(div, "svelte-zbu7j0", true);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"container","columns","gutter","order","xs","sm","md","lg","xl","xsOffset","smOffset","mdOffset","lgOffset","xlOffset"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { container = false } = $$props;
    	let { columns = 12 } = $$props;
    	let { gutter = null } = $$props;
    	let { order = null } = $$props;
    	let { xs = null } = $$props;
    	let { sm = null } = $$props;
    	let { md = null } = $$props;
    	let { lg = null } = $$props;
    	let { xl = null } = $$props;
    	let { xsOffset = null } = $$props;
    	let { smOffset = null } = $$props;
    	let { mdOffset = null } = $$props;
    	let { lgOffset = null } = $$props;
    	let { xlOffset = null } = $$props;
    	let classGeneral = '';
    	let styleGeneral = '';
    	let localColumns;
    	const unsubscribe = columnsStore.subscribe(value => localColumns = value);

    	const getValue = breakpoint => {
    		if (breakpoint > localColumns) {
    			breakpoint = localColumns;
    		}

    		return breakpoint
    		? `${breakpoint / localColumns * 100}%`
    		: false;
    	};

    	const createClassSize = () => {
    		let newClass = 'col-xs ';
    		newClass += sm ? 'col-sm ' : '';
    		newClass += md ? 'col-md ' : '';
    		newClass += lg ? 'col-lg ' : '';
    		newClass += xl ? 'col-xl ' : '';
    		newClass += xsOffset ? 'colSGR-offset-xs ' : '';
    		newClass += smOffset ? 'colSGR-offset-sm ' : '';
    		newClass += mdOffset ? 'colSGR-offset-md ' : '';
    		newClass += lgOffset ? 'colSGR-offset-lg ' : '';
    		newClass += xlOffset ? 'colSGR-offset-xl ' : '';
    		return newClass;
    	};

    	const createStyleSize = () => {
    		let newStyle = '';

    		newStyle += xs
    		? `--xsWidthSGR:${getValue(xs)}; `
    		: `--xsWidthSGR:100%; `;

    		newStyle += sm ? `--smWidthSGR:${getValue(sm)}; ` : '';
    		newStyle += md ? `--mdWidthSGR:${getValue(md)}; ` : '';
    		newStyle += lg ? `--lgWidthSGR:${getValue(lg)}; ` : '';
    		newStyle += xl ? `--xlWidthSGR:${getValue(xl)}; ` : '';
    		newStyle += xsOffset ? `--xsOffset:${getValue(xsOffset)}; ` : '';
    		newStyle += smOffset ? `--smOffset:${getValue(smOffset)}; ` : '';
    		newStyle += mdOffset ? `--mdOffset:${getValue(mdOffset)}; ` : '';
    		newStyle += lgOffset ? `--lgOffset:${getValue(lgOffset)}; ` : '';
    		newStyle += xlOffset ? `--xlOffset:${getValue(xlOffset)}; ` : '';
    		return newStyle;
    	};

    	const createGutter = () => {
    		return gutter
    		? `--paddingSGR:${gutter / 2}px;--marginSGR:-${gutter / 2}px;`
    		: '--paddingSGR:0px;--marginSGR:0px;';
    	};

    	onDestroy(() => unsubscribe());

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('container' in $$new_props) $$invalidate(3, container = $$new_props.container);
    		if ('columns' in $$new_props) $$invalidate(4, columns = $$new_props.columns);
    		if ('gutter' in $$new_props) $$invalidate(5, gutter = $$new_props.gutter);
    		if ('order' in $$new_props) $$invalidate(6, order = $$new_props.order);
    		if ('xs' in $$new_props) $$invalidate(7, xs = $$new_props.xs);
    		if ('sm' in $$new_props) $$invalidate(8, sm = $$new_props.sm);
    		if ('md' in $$new_props) $$invalidate(9, md = $$new_props.md);
    		if ('lg' in $$new_props) $$invalidate(10, lg = $$new_props.lg);
    		if ('xl' in $$new_props) $$invalidate(11, xl = $$new_props.xl);
    		if ('xsOffset' in $$new_props) $$invalidate(12, xsOffset = $$new_props.xsOffset);
    		if ('smOffset' in $$new_props) $$invalidate(13, smOffset = $$new_props.smOffset);
    		if ('mdOffset' in $$new_props) $$invalidate(14, mdOffset = $$new_props.mdOffset);
    		if ('lgOffset' in $$new_props) $$invalidate(15, lgOffset = $$new_props.lgOffset);
    		if ('xlOffset' in $$new_props) $$invalidate(16, xlOffset = $$new_props.xlOffset);
    		if ('$$scope' in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		{
    			$$invalidate(0, classGeneral = container
    			? 'containerSGR'
    			: `colSGR ${createClassSize()}`);

    			if (container) {
    				$$invalidate(1, styleGeneral = createGutter());
    				columnsStore.update(() => columns || 12);
    			} else {
    				$$invalidate(1, styleGeneral = createStyleSize());

    				if (xs || sm || md || lg || xl) {
    					$$invalidate(1, styleGeneral += `--colFlexSGR:0;`);
    				} else {
    					$$invalidate(1, styleGeneral = `--colFlexSGR:1;`);
    				}

    				if (order || order === 0) {
    					$$invalidate(1, styleGeneral += `--orderSGR:${order};`);
    				}
    			}

    			if ($$restProps.style) {
    				$$invalidate(1, styleGeneral += $$restProps.style);
    			}

    			if ($$restProps.class) {
    				$$invalidate(0, classGeneral += ` ${$$restProps.class}`);
    			}
    		}
    	};

    	return [
    		classGeneral,
    		styleGeneral,
    		$$restProps,
    		container,
    		columns,
    		gutter,
    		order,
    		xs,
    		sm,
    		md,
    		lg,
    		xl,
    		xsOffset,
    		smOffset,
    		mdOffset,
    		lgOffset,
    		xlOffset,
    		$$scope,
    		slots
    	];
    }

    class Grid extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(
    			this,
    			options,
    			instance,
    			create_fragment,
    			safe_not_equal,
    			{
    				container: 3,
    				columns: 4,
    				gutter: 5,
    				order: 6,
    				xs: 7,
    				sm: 8,
    				md: 9,
    				lg: 10,
    				xl: 11,
    				xsOffset: 12,
    				smOffset: 13,
    				mdOffset: 14,
    				lgOffset: 15,
    				xlOffset: 16
    			},
    			add_css
    		);
    	}
    }

    return Grid;

})));
