import {
  writable
} from "./chunk-OX7W4OIX.js";
import "./chunk-XML7UXAA.js";
import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  add_location,
  append_styles,
  assign,
  children,
  claim_element,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  onDestroy,
  safe_not_equal,
  set_attributes,
  toggle_class,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-SKZ77QWX.js";
import "./chunk-LYBY5SRM.js";
import "./chunk-2B2CG5KL.js";

// node_modules/svelte-grid-responsive/dist/stores.js
var columnsStore = writable(12);

// node_modules/svelte-grid-responsive/dist/Grid.svelte
var file = "node_modules/svelte-grid-responsive/dist/Grid.svelte";
function add_css(target) {
  append_styles(target, "svelte-zbu7j0", ".containerSGR.svelte-zbu7j0{box-sizing:border-box;display:flex;flex-wrap:wrap;width:calc(100% + (var(--paddingSGR) * 2));margin:var(--marginSGR)}.colSGR.svelte-zbu7j0{position:relative;box-sizing:border-box;flex-grow:var(--colFlexSGR);padding:var(--paddingSGR);order:var(--orderSGR)}.colSGR-offset-xs.svelte-zbu7j0{margin-left:var(--xsOffset)}.col-xs.svelte-zbu7j0{flex-basis:var(--xsWidthSGR);max-width:var(--xsWidthSGR)}@media(min-width: 576px){.col-sm.svelte-zbu7j0{flex-basis:var(--smWidthSGR);max-width:var(--smWidthSGR)}.colSGR-offset-sm.svelte-zbu7j0{margin-left:var(--smOffset)}}@media(min-width: 768px){.col-md.svelte-zbu7j0{flex-basis:var(--mdWidthSGR);max-width:var(--mdWidthSGR)}.colSGR-offset-md.svelte-zbu7j0{margin-left:var(--mdOffset)}}@media(min-width: 992px){.col-lg.svelte-zbu7j0{flex-basis:var(--lgWidthSGR);max-width:var(--lgWidthSGR)}.colSGR-offset-lg.svelte-zbu7j0{margin-left:var(--lgOffset)}}@media(min-width: 1200px){.col-xl.svelte-zbu7j0{max-width:var(--xlWidthSGR)}.colSGR-offset-xl.svelte-zbu7j0{margin-left:var(--xlOffset)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JpZC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBNEZFLDJCQUFjLENBQ1osVUFBVSxDQUFFLFVBQVUsQ0FDdEIsT0FBTyxDQUFFLElBQUksQ0FDYixTQUFTLENBQUUsSUFBSSxDQUNmLEtBQUssQ0FBRSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMzQyxNQUFNLENBQUUsSUFBSSxXQUFXLENBQ3pCLENBRUEscUJBQVEsQ0FDTixRQUFRLENBQUUsUUFBUSxDQUNsQixVQUFVLENBQUUsVUFBVSxDQUN0QixTQUFTLENBQUUsSUFBSSxZQUFZLENBQUMsQ0FDNUIsT0FBTyxDQUFFLElBQUksWUFBWSxDQUFDLENBQzFCLEtBQUssQ0FBRSxJQUFJLFVBQVUsQ0FDdkIsQ0FFQSwrQkFBa0IsQ0FDaEIsV0FBVyxDQUFFLElBQUksVUFBVSxDQUM3QixDQUVBLHFCQUFRLENBQ04sVUFBVSxDQUFFLElBQUksWUFBWSxDQUFDLENBQzdCLFNBQVMsQ0FBRSxJQUFJLFlBQVksQ0FDN0IsQ0FFQSxNQUFPLFlBQVksS0FBSyxDQUFFLENBQ3hCLHFCQUFRLENBQ04sVUFBVSxDQUFFLElBQUksWUFBWSxDQUFDLENBQzdCLFNBQVMsQ0FBRSxJQUFJLFlBQVksQ0FDN0IsQ0FDQSwrQkFBa0IsQ0FDaEIsV0FBVyxDQUFFLElBQUksVUFBVSxDQUM3QixDQUNGLENBRUEsTUFBTyxZQUFZLEtBQUssQ0FBRSxDQUN4QixxQkFBUSxDQUNOLFVBQVUsQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUM3QixTQUFTLENBQUUsSUFBSSxZQUFZLENBQzdCLENBQ0EsK0JBQWtCLENBQ2hCLFdBQVcsQ0FBRSxJQUFJLFVBQVUsQ0FDN0IsQ0FDRixDQUVBLE1BQU8sWUFBWSxLQUFLLENBQUUsQ0FDeEIscUJBQVEsQ0FDTixVQUFVLENBQUUsSUFBSSxZQUFZLENBQUMsQ0FDN0IsU0FBUyxDQUFFLElBQUksWUFBWSxDQUM3QixDQUNBLCtCQUFrQixDQUNoQixXQUFXLENBQUUsSUFBSSxVQUFVLENBQzdCLENBQ0YsQ0FFQSxNQUFPLFlBQVksTUFBTSxDQUFFLENBQ3pCLHFCQUFRLENBQ04sU0FBUyxDQUFFLElBQUksWUFBWSxDQUM3QixDQUNBLCtCQUFrQixDQUNoQixXQUFXLENBQUUsSUFBSSxVQUFVLENBQzdCLENBQ0YiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiR3JpZC5zdmVsdGUiXX0= */");
}
function create_fragment(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[18].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[17],
    null
  );
  let div_levels = [
    /*$$restProps*/
    ctx[2],
    { style: (
      /*styleGeneral*/
      ctx[1]
    ) },
    { class: (
      /*classGeneral*/
      ctx[0]
    ) }
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { style: true, class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div, div_data);
      toggle_class(div, "svelte-zbu7j0", true);
      add_location(div, file, 87, 0, 2927);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        131072)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[17],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[17]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[17],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        dirty & /*$$restProps*/
        4 && /*$$restProps*/
        ctx2[2],
        (!current || dirty & /*styleGeneral*/
        2) && { style: (
          /*styleGeneral*/
          ctx2[1]
        ) },
        (!current || dirty & /*classGeneral*/
        1) && { class: (
          /*classGeneral*/
          ctx2[0]
        ) }
      ]));
      toggle_class(div, "svelte-zbu7j0", true);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "container",
    "columns",
    "gutter",
    "order",
    "xs",
    "sm",
    "md",
    "lg",
    "xl",
    "xsOffset",
    "smOffset",
    "mdOffset",
    "lgOffset",
    "xlOffset"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Grid", slots, ["default"]);
  let { container = false } = $$props;
  let { columns = 12 } = $$props;
  let { gutter = null } = $$props;
  let { order = null } = $$props;
  let { xs = null } = $$props;
  let { sm = null } = $$props;
  let { md = null } = $$props;
  let { lg = null } = $$props;
  let { xl = null } = $$props;
  let { xsOffset = null } = $$props;
  let { smOffset = null } = $$props;
  let { mdOffset = null } = $$props;
  let { lgOffset = null } = $$props;
  let { xlOffset = null } = $$props;
  let classGeneral = "";
  let styleGeneral = "";
  let localColumns;
  const unsubscribe = columnsStore.subscribe((value) => localColumns = value);
  const getValue = (breakpoint) => {
    if (breakpoint > localColumns) {
      breakpoint = localColumns;
    }
    return breakpoint ? `${breakpoint / localColumns * 100}%` : false;
  };
  const createClassSize = () => {
    let newClass = "col-xs ";
    newClass += sm ? "col-sm " : "";
    newClass += md ? "col-md " : "";
    newClass += lg ? "col-lg " : "";
    newClass += xl ? "col-xl " : "";
    newClass += xsOffset ? "colSGR-offset-xs " : "";
    newClass += smOffset ? "colSGR-offset-sm " : "";
    newClass += mdOffset ? "colSGR-offset-md " : "";
    newClass += lgOffset ? "colSGR-offset-lg " : "";
    newClass += xlOffset ? "colSGR-offset-xl " : "";
    return newClass;
  };
  const createStyleSize = () => {
    let newStyle = "";
    newStyle += xs ? `--xsWidthSGR:${getValue(xs)}; ` : `--xsWidthSGR:100%; `;
    newStyle += sm ? `--smWidthSGR:${getValue(sm)}; ` : "";
    newStyle += md ? `--mdWidthSGR:${getValue(md)}; ` : "";
    newStyle += lg ? `--lgWidthSGR:${getValue(lg)}; ` : "";
    newStyle += xl ? `--xlWidthSGR:${getValue(xl)}; ` : "";
    newStyle += xsOffset ? `--xsOffset:${getValue(xsOffset)}; ` : "";
    newStyle += smOffset ? `--smOffset:${getValue(smOffset)}; ` : "";
    newStyle += mdOffset ? `--mdOffset:${getValue(mdOffset)}; ` : "";
    newStyle += lgOffset ? `--lgOffset:${getValue(lgOffset)}; ` : "";
    newStyle += xlOffset ? `--xlOffset:${getValue(xlOffset)}; ` : "";
    return newStyle;
  };
  const createGutter = () => {
    return gutter ? `--paddingSGR:${gutter / 2}px;--marginSGR:-${gutter / 2}px;` : "--paddingSGR:0px;--marginSGR:0px;";
  };
  onDestroy(() => unsubscribe());
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("container" in $$new_props)
      $$invalidate(3, container = $$new_props.container);
    if ("columns" in $$new_props)
      $$invalidate(4, columns = $$new_props.columns);
    if ("gutter" in $$new_props)
      $$invalidate(5, gutter = $$new_props.gutter);
    if ("order" in $$new_props)
      $$invalidate(6, order = $$new_props.order);
    if ("xs" in $$new_props)
      $$invalidate(7, xs = $$new_props.xs);
    if ("sm" in $$new_props)
      $$invalidate(8, sm = $$new_props.sm);
    if ("md" in $$new_props)
      $$invalidate(9, md = $$new_props.md);
    if ("lg" in $$new_props)
      $$invalidate(10, lg = $$new_props.lg);
    if ("xl" in $$new_props)
      $$invalidate(11, xl = $$new_props.xl);
    if ("xsOffset" in $$new_props)
      $$invalidate(12, xsOffset = $$new_props.xsOffset);
    if ("smOffset" in $$new_props)
      $$invalidate(13, smOffset = $$new_props.smOffset);
    if ("mdOffset" in $$new_props)
      $$invalidate(14, mdOffset = $$new_props.mdOffset);
    if ("lgOffset" in $$new_props)
      $$invalidate(15, lgOffset = $$new_props.lgOffset);
    if ("xlOffset" in $$new_props)
      $$invalidate(16, xlOffset = $$new_props.xlOffset);
    if ("$$scope" in $$new_props)
      $$invalidate(17, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    onDestroy,
    columnsStore,
    container,
    columns,
    gutter,
    order,
    xs,
    sm,
    md,
    lg,
    xl,
    xsOffset,
    smOffset,
    mdOffset,
    lgOffset,
    xlOffset,
    classGeneral,
    styleGeneral,
    localColumns,
    unsubscribe,
    getValue,
    createClassSize,
    createStyleSize,
    createGutter
  });
  $$self.$inject_state = ($$new_props) => {
    if ("container" in $$props)
      $$invalidate(3, container = $$new_props.container);
    if ("columns" in $$props)
      $$invalidate(4, columns = $$new_props.columns);
    if ("gutter" in $$props)
      $$invalidate(5, gutter = $$new_props.gutter);
    if ("order" in $$props)
      $$invalidate(6, order = $$new_props.order);
    if ("xs" in $$props)
      $$invalidate(7, xs = $$new_props.xs);
    if ("sm" in $$props)
      $$invalidate(8, sm = $$new_props.sm);
    if ("md" in $$props)
      $$invalidate(9, md = $$new_props.md);
    if ("lg" in $$props)
      $$invalidate(10, lg = $$new_props.lg);
    if ("xl" in $$props)
      $$invalidate(11, xl = $$new_props.xl);
    if ("xsOffset" in $$props)
      $$invalidate(12, xsOffset = $$new_props.xsOffset);
    if ("smOffset" in $$props)
      $$invalidate(13, smOffset = $$new_props.smOffset);
    if ("mdOffset" in $$props)
      $$invalidate(14, mdOffset = $$new_props.mdOffset);
    if ("lgOffset" in $$props)
      $$invalidate(15, lgOffset = $$new_props.lgOffset);
    if ("xlOffset" in $$props)
      $$invalidate(16, xlOffset = $$new_props.xlOffset);
    if ("classGeneral" in $$props)
      $$invalidate(0, classGeneral = $$new_props.classGeneral);
    if ("styleGeneral" in $$props)
      $$invalidate(1, styleGeneral = $$new_props.styleGeneral);
    if ("localColumns" in $$props)
      localColumns = $$new_props.localColumns;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    $: {
      $$invalidate(0, classGeneral = container ? "containerSGR" : `colSGR ${createClassSize()}`);
      if (container) {
        $$invalidate(1, styleGeneral = createGutter());
        columnsStore.update(() => columns || 12);
      } else {
        $$invalidate(1, styleGeneral = createStyleSize());
        if (xs || sm || md || lg || xl) {
          $$invalidate(1, styleGeneral += `--colFlexSGR:0;`);
        } else {
          $$invalidate(1, styleGeneral = `--colFlexSGR:1;`);
        }
        if (order || order === 0) {
          $$invalidate(1, styleGeneral += `--orderSGR:${order};`);
        }
      }
      if ($$restProps.style) {
        $$invalidate(1, styleGeneral += $$restProps.style);
      }
      if ($$restProps.class) {
        $$invalidate(0, classGeneral += ` ${$$restProps.class}`);
      }
    }
  };
  return [
    classGeneral,
    styleGeneral,
    $$restProps,
    container,
    columns,
    gutter,
    order,
    xs,
    sm,
    md,
    lg,
    xl,
    xsOffset,
    smOffset,
    mdOffset,
    lgOffset,
    xlOffset,
    $$scope,
    slots
  ];
}
var Grid = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        container: 3,
        columns: 4,
        gutter: 5,
        order: 6,
        xs: 7,
        sm: 8,
        md: 9,
        lg: 10,
        xl: 11,
        xsOffset: 12,
        smOffset: 13,
        mdOffset: 14,
        lgOffset: 15,
        xlOffset: 16
      },
      add_css
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Grid",
      options,
      id: create_fragment.name
    });
  }
  get container() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set container(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get columns() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set columns(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get gutter() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set gutter(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get order() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set order(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xs() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xs(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get sm() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set sm(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get md() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set md(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lg() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lg(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xl() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xl(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xsOffset() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xsOffset(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get smOffset() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set smOffset(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get mdOffset() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set mdOffset(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lgOffset() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lgOffset(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xlOffset() {
    throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xlOffset(value) {
    throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Grid_default = Grid;
export {
  Grid_default as default
};
//# sourceMappingURL=svelte-grid-responsive.js.map
